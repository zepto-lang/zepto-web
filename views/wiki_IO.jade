extends wiki_tpl

block wiki
  h1 IO in zepto

  p
    | Doing IO in zepto is pretty straightforward (or so I hope), but 
    a(href='#output') there are a few pitfalls
    |. This tutorial aims to provide you with all knowledge that is
    | necessary to read things or print them to stdout and into files.

  h2 Introductory Terms

  p
    | There is one core concept in zepto that is connected to IO, namely
    | ports. So what are ports?

  p
    | Ports are anything you can read from and write into. That includes
    | files, of course, but also such things as the standard input and
    | output devices, commonly known as 
    span: code stdin
    |  and 
    span: code stdout
    |  . Those are actually
    | pretty similar to the 
    span: code FILE
    |  type in C or the 
    span: code file
    |  objects in Python.

  p
    | You can create them in two ways, depending on their type. There are
    | two ways of opening files, namely:

  pre
    code(class='language-scheme')
      | (open-input-file "foo")
      | (open-output-file "bar")
      | (close-input-file input-file)
      | (close-output-file output-file)

  p
    | What you get back from the two open functions is an 
    span: code IO Port
    |  , meaning
    | the general type is the same. This in turn means that something like  
    span: code(class='language-scheme') (write "foo" (open-input-file "bar"))
    |  is not yielding a type error, but rather a string representing the IO error.
    | Closing is done by invoking the analogous call.

  p
    | How can you avoid errors like the above? Firstly, there are a few
    | check functions:

  pre
    code(class='language-scheme')
      | (port? foo)
      | (input-port? bar)
      | (output-port? baz)

  p This allows us to do something like this:

  pre
    code(class='language-scheme')
      | (if (input-port? foo)
      |   (read foo)
      | #f)

  p
    | Some of such functions are defined in the IO part of the standard library.
    | Here are the ones I consider the most important:

  pre
    code(class='language-scheme')
      | (read? input-file) ; this will either read from the port if it is a input-file
      |                    ; or return #f.
      | (write? output-file "some important log or such") ; this is the inverse for an
      |                                                   ; output file.

  p This should suffice as an appetizer. Let us move on to more specialized topics.

  h2 Input

  p
    | With all the initial hurdles out of the way, let us do some input. There are a
    | few functions used for doing input, here is an overview:

  pre
    code(class='language-scheme')
      | (read)
      | (read :stdin)
      | (read (open-input-file "foo"))
      | (read? (open-input-file "foo"))
      | (read-contents "foo")
      | (parse "foo")

  p
    | We already covered 
    span: code read?
    |  and parts of 
    span: code read
    |  . The other two calls to read
    | will both read something from stdin, namely until the first whitespace is
    | encountered. This behaviour can be found in 
    span: code(class='language-scheme') (read input-file)
    |  , too.

  p
    | The last two calls are a bit special. 
    span: code read-contents
    |  is a convenience function
    | allowing you to pass the filename as a string that will give you back the file
    | contents as a string. 
    span: code parse
    |  does exactly the same, although it will also parse
    | the file, which means that it will have to be a valid scheme file. That is for
    | all of you metaprogramming fiends.

  h2(id="output") Output

  p
    | Output is pretty similar to Input, only the other way around. Makes sense,
    | doesn't it? The relevant function calls are:

  pre
    code(class='language-scheme')
      | (write)
      | (write "bla" :stdout)
      | (error)
      | (write "bla" :stderr)
      | (write (open-input-file "foo"))
      | (write? (open-input-file "foo"))
      | (newline)
      | (color :black)
      | (escape-sequence 30)

  p
    | It all behaves pretty similarly to the Input functions. If you want to
    | write to stderr, either call 
    span: code error
    |  or 
    span: code write
    |  and pass in the escaped
    | atom of 
    span: code stderr
    |  . Calling color will change your outputs color. If you
    | are done with the funkiness, call 
    span: code color
    |  again, this time either with
    | no arguments or, if you want to make it more verbose 
    span: code reset
    |  or 
    span: code none
    |  .
    span: code escape-sequence
    |  is a bit more general. You can provide it an integer
    | and it will wrap a ANSI escape sequence around it. The above example will
    | colorize your prompt red, for instance.

  p
    b There is one major pitfall here: 
    | Ports are buffered, so depending on how large the chunks you write are 
    | you might have to close it before expecting anything in the file.
    i
      | The streams are not guaranteed to be written when the REPL or the program 
      | ends unless you explicitly close the port. 
    | This does not apply to stdout, of course.

  h2 IO in the standard library

  p
    | There are not as many standard library abstractions to IO as I would
    | hope for yet. However, there are a few wrapper functions. We already
    | saw two of them, namely 
    span: code read?
    |  and 
    span: code write?
    |  . The other ones are: 

  pre
    code(class='language-scheme')
      | (call-with-input-file "foo" some-func)
      | (call-with-output-file "bar" some-func)
      | (with-input-from-file "baz" some-func)
      | (with-output-to-file "fooz?" some-func)

  p
    b None of those are extensively tested, though
    | , so I would advise against using them at the moment.

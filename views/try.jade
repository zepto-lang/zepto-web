extends web_tpl

block text
  script
    | function stdlib() {
    |   var htmlDecode = function(input){
    |     var e = document.createElement('div');
    |     e.innerHTML = input;
    |     return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
    |   }
    |   var f = document.getElementById("stdlib-xt");
    |   document.getElementById('stdlib').stdlibData = htmlDecode(f.contentWindow.document.body.childNodes[0].innerHTML);
    | }
  h1 Try Zepto!
  p 
    | This is a sandbox for programming in zepto in the browser.
    | Try typing zepto code below. It should update in real time.
    | Program output is displayed in the window on the left bottom corner.
    | Any debug output (i.e. print output and meta information) is displayed
    | on the window on the bottom right corner.
  h2 zepto Sandbox
  p
    | You can also select an example from below. Hopefully they
    | will inspire you to do something great!
  #button-group
    button(id='default-example' onclick='load("lc", this)' class='examples') List Comprehensions
    button(onclick='load("aln", this)' class='examples') Arbitrary Length Numbers
    button(onclick='load("ffi", this)' class='examples') Javascript FFI
    button(onclick='load("tce", this)' class='examples') Tail Call Elimination
    button(onclick='load("ms", this)' class='examples') Mutable State
    button(onclick='load("nt", this)' class='examples') Full Numeric Tower
    button(onclick='load("hm", this)' class='examples') Collections
    button(onclick='load("mc", this)' class='examples') Macros
    button(onclick='load("ct", this)' class='examples') Continuations
  #editor
  .wrap
    label(for="result") Program Output
    textarea(id='result' rows="10" cols="50" readonly)
  .wrap
    label(for="dbg") Debug Output
    textarea(id='dbg' rows="10" cols="50" readonly)
  
  iframe(id="stdlib-xt" src="/javascript/zepto-dist/stdlib.txt" onload="stdlib();" hidden)
  div(id="stdlib" hidden)

  link(rel='stylesheet', href='/stylesheets/try.css')
  script(type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/ace/1.1.01/ace.js" charset="utf-8")
  script(type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/ace/1.1.01/mode-scheme.js")
  script(type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/ace/1.1.01/theme-dawn.js")
  script
    | var editor = ace.edit('editor');
    | editor.setTheme('ace/theme/dawn');
    | editor.getSession().setMode('ace/mode/scheme');
    | editor.getSession().setTabSize(2);
    | editor.renderer.setShowGutter(false);
    | 
    | var load = (function() {
    |    var _examples = { "lc": '(define (main) "the main fun"\n\t; do not fret, this is just a list comprehension. Look them up in the wiki\n\t; or just note that their syntax is [{action} | {element} <- {list} , {optional-filter}]\n\t(list->string\n\t\t[x | x <- [#\\h #\\e #\\y #\\, #\\space #\\g #\\u #\\y #\\s #\\! #\\2], (not (char=? x #\\2))]))\n\n(main)', 
    | "aln": '(define (main) "calculates a *big* number"\n\t(pow 32 6500))\n\n(main)', 
    | "ffi": '(define (main) "lets do some inline js"\n\t(begin\n\t[js|\n\t\twindow.foo = function() { /* I am a Javascript function */\n\t\t\tdocument.body.style.transition = "background-color 1s";\n\t\t\tdocument.body.style.backgroundColor = "hotpink";\n\t\t\tsetTimeout(function() {\n\t\t\t\tdocument.body.style.backgroundColor = "";\n\t\t\t}, 1000);\n\t\t};\n\t|]\n\t(js "foo()")\n\t(js "delete foo")))\n(main)', 
    | "tce": '(define (fact n p) "the dumbest factorial function in the world, but tail recursive"\n\t(if (<= n 1)\n\t\tp\n\t\t(fact (- n 1) (* p n))))\n\n(define (main)\n(fact 1000 1))\n\n(main)', 
    | "ms": '(define (main) "lets use mutable vars; note that were impure here, though"\n\t(let ((x 1)\n\t\t\t (str ""))\n\t(begin\n\t\t(set! str (++ str "before: " (number->string x)))\n\t\t(set! x 100)\n\t\t(++ str "; after: " (number->string x)))))\n\n(main)', 
    | "nt": '(define (main) "a walk through the full numeric tower"\n\t; complex <- float <- rational <- integer <- small-int\n\t(sqrt (exact->inexact (* 1/1 (* 1 (make-small -1))))))\n\n; explanation of small-int:\n; the small is a dangerous type; it is not of arbitrary precision;\n; it is just a wrapper over hardware numbers, which makes it fast\n; but wrap around at some point\n; try running (make small (+ 1 (pow 2 31))) and see what happens\n(main)', 
    | "mc": '; Zepto also supports Scheme-style Hygienic Macros.\n; If you don\'t know what that means, start here: \n; http://community.schemewiki.org/?scheme-faq-macros\n\n(define-syntax macro \n  (syntax-rules ()\n\t((macro) ["this is a macro"])))\n\t\n(macro)\n', 
    | "ct": '; Continuations are also present, but somewhat buggy.\n; If you do not know what that is, start here: \n; http://community.schemewiki.org/?call-with-current-continuation\n\n(define (main)\n  (begin\n\t(define (f return)\n\t  (return 2)\n\t  3)\n \n\t(write (f (lambda (x) x))) ; displays 3\n \n\t(write (call-with-current-continuation f)) ; displays 2\n\t(write (call/cc f)))) ; displays 2\n\n(main)\n',
    | "hm": '; this is supposed to serve as an overview over zeptos collection types,\n; namely lists, vectors and hashmaps.\n(define (main) "an overview over zepto collections; lists, vectors, hash-maps"\n\t(begin\n\t; Lists are constructed like [this], \'(this) or (list "like" "this").\n\t; The first two constructors are equivalent, the second evaluates to\n\t; a real constructor function.\n\t; Lists are for storing heterogenous things and code that should not be\n\t; evaluated (yet).\n\t(write ["this" "is" "a" "list." "It stores things."])\n\t; Vectors are constructed like {this}, \#(this) or, again, (vector "like" "this").\n\t; They are optimized for random access of elements and they behave a lot like\n\t; arrays.\n\t; Lists and vectors try to play well with each other.\n\t(write {"this" "is" "a" "vector." "It is good for fast random access of elements"})\n\t(write (list->vector ["i was a list."]))\n\t; Hashmaps are there to store key-value pairs (they are mostly either called\n\t; hashmaps or dictionaries in other languages). They are constructed like\n\t; \#{:key "this"} or (make-hash [:key2 "this"]).\n\t; Their keys can only be simple values (not collections or functions) or,\n\t; if you really need compound keys, lists of exclusively simple values.\n\t(write (make-hash [:key :value]\n\t\t["i am a" :hashmap]\n\t\t(make-simple-list (list :compound :key)) "compound; yay!"))))\n\n(main)\n',
    | };
    |   var _prev = null;
    |   return function(t, firer) {
    |     if(_prev) _prev.className = "examples";
    |     _prev = firer;
    |     _prev.className = "examples clicked";
    |     editor.getSession().setValue(_examples[t]);
    |   };})();
    |   load("lc", document.getElementById('default-example'));
    | 
    | if(typeof Zepto === 'object' && typeof Zepto.Main === 'object' && typeof Zepto.Main.main === 'function') Zepto.Main.main();      
  script(language="javascript" src="/javascript/zepto-dist/rts.js" defer)
  script(language="javascript" src="/javascript/zepto-dist/lib.js" defer)
  script(language="javascript" src="/javascript/zepto-dist/out.js" defer)
  script(language="javascript" src="/javascript/zepto-dist/runmain.js" defer)
